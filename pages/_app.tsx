/**
 * Для упрощения разработки приложения, помимо роутинга относительно структуры файлов, Page роутер 
 * работает с компонентами с зарезервированными именами для автоматической поддержки ряда сценариев.
 *  Основным таким компонентом является _app.jsx/tsx – рутовый компонент,
 */

import type { AppProps } from "next/app";
// Данный экспорт по умолчанию является обязательным
export default function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}



/**,????? Component подсвечивался https://stackoverflow.com/questions/73019348/component-cannot-be-used-as-a-jsx-component-its-element-type-reactelementan
 *  ==== Проблема связана с последней версией @types/react:18.xx. Возможно, 
 * она появилась в вашем проекте через одноранговую зависимость некоторых других пакетов.
Если у вас есть файл .tsconfig, добавьте следующее в compilerOptions:
"paths": {
   "react": [ "./node_modules/@types/react" ]
 }
 !!!!!!!!https://github.com/pacocoursey/next-themes!!!!!!!!!!!!!!!!!!!!!!!
 * ------------------------------------------------------
 * Что происходит в этом файле:
1. - Он импортирует AppProps из Next.js, который содержит типы свойств, 
передаваемых компоненту приложения.
2. - Функция MyApp принимает два аргумента: Component и pageProps. 
Component - это компонент страницы, которую Next.js будет рендерить, 
а pageProps - это пропсы страницы, переданные приложению.
3. - Возвращается JSX, который рендерит компонент страницы (Component) 
с пропсами (pageProps).
       Этот файл позволяет вам добавить общую логику или компоненты, 
которые вы хотите использовать на всех страницах вашего приложения,
 например, макеты, стили или обработчики событий. Это также место, 
 где вы можете добавить логику для обработки состояния приложения, 
 такой как управление аутентификацией или глобальным состоянием.
 * 
 * 
* 
 * 
 * 
 * 
 */